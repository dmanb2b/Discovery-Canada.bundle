M3U8_LOOKUP = "http://esi.ctv.ca/datafeed/flv/urlgenjs.aspx?vid=%s&formatid=19"

# iOS app video feed, must be parsed manually
# They say: "This bin contains all the videos that will be picked up by the iOS Discovery app. Show specific clips will be filtered using video/clip title field."
FEED_URL="http://www.discovery.ca/feeds/videos.aspx" 
NAMESPACES = {'ctv': 'http://www.ctv.ca'}

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):
	# read the main iOS data
	data = XML.ObjectFromURL(FEED_URL)
	clipId = url.split("#")[1].replace("clip","")
	video = data.xpath("//item/ctv:clipList/item/ctv:id[text()=%s]/ancestor::item" % (clipId),namespaces=NAMESPACES)[0]
	title = video.xpath("./title/text()",namespaces=NAMESPACES)[0]
	summary = video.xpath("./description",namespaces=NAMESPACES)[0]
	thumb_url = video.xpath("./ctv:imageList/item/link",namespaces=NAMESPACES)[0]
		
	mo = VideoClipObject(
		title=title,
		summary=summary, 
		thumb=Resource.ContentsOfURLWithFallback(url=thumb_url, fallback='icon-discovery.png')
	)
	return mo

####################################################################################################
def MediaObjectsForURL(url):
	# read the main iOS data
	data = XML.ObjectFromURL(FEED_URL)
	clipId = url.split("#")[1].replace("clip","")
	
	# find the node with our passed clip, then grab all the clips that are listed for that video
	allClips = data.xpath("//item/ctv:clipList/item/ctv:id[text()=%s]/ancestor::ctv:clipList/item/ctv:id" % (clipId),namespaces=NAMESPACES)
	clips = []
	for clip in allClips:
		clips.append(PartObject(key=HTTPLiveStreamURL(Callback(PlayVideo, clip=str(clip)))))

	return [
		MediaObject(
			parts = clips,
			container = 'mpegts',
			video_resolution = '720',
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]


####################################################################################################

def PlayVideo(clip):
	playlist_url = HTTP.Request(M3U8_LOOKUP % clip).content.strip()[17:].split("'")[0]
	Log.Debug("Looking up playlist for clip "+clip)
	
	if playlist_url.startswith('http'):	
		playlist_url = playlist_url.replace("master.m3u8","index_7_av.m3u8") # instead of reading the master we want index_7_av (720p)
		Log.Debug("Playlist URL: "+playlist_url)
		return Redirect(HTTPLiveStreamURL(playlist_url))

####################################################################################################
# def TestURLs():
# 
# 		test_urls = []
# 
# 		for site in SITES:
# 				data = HTML.ElementFromURL('http://watch.%s' % site)
# 				try:
# 					url = data.xpath('//div[@id="CatalogContainer"]//dl[@class="Item"]//a[@title="Play"]')[0].get('href')
# 					if '/comics-on/' in url:
# 						continue
# 					else:
# 						test_urls.append(url)
# 				except:
# 					pass
# 
# 		return test_urls
