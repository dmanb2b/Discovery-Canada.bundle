# iOS app video feed, must be parsed manually
# They say: "This bin contains all the videos that will be picked up by the iOS Discovery app. Show specific clips will be filtered using video/clip title field."
FEED_URL = 'http://www.discovery.ca/feeds/videos.aspx'
NAMESPACES = {'ctv': 'http://www.ctv.ca'}
M3U8_LOOKUP = 'http://esi.ctv.ca/datafeed/flv/urlgenjs.aspx?vid=%s&formatid=19'

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):

	# read the main iOS data
	data = XML.ObjectFromURL(FEED_URL)
	clipId = url.split("#")[1].replace("clip","")
	video = data.xpath("//item/ctv:clipList/item/ctv:id[text()=%s]/ancestor::item" % (clipId),namespaces=NAMESPACES)[0]
	title = video.xpath("./title/text()",namespaces=NAMESPACES)[0]
	summary = video.xpath("./description",namespaces=NAMESPACES)[0]
	thumb_url = video.xpath("./ctv:imageList/item/link",namespaces=NAMESPACES)[0]

	return VideoClipObject(
		title = title,
		summary = summary,
		thumb = Resource.ContentsOfURLWithFallback(url=thumb_url, fallback='icon-default.png')
	)

####################################################################################################
def MediaObjectsForURL(url):

	# read the main iOS data
	data = XML.ObjectFromURL(FEED_URL)
	clipId = url.split("#")[1].replace("clip","")

	# find the node with our passed clip, then grab all the clips that are listed for that video
	allClips = data.xpath("//item/ctv:clipList/item/ctv:id[text()=%s]/ancestor::ctv:clipList/item/ctv:id" % (clipId),namespaces=NAMESPACES)
	clips = []

	for clip in allClips:
		clips.append(PartObject(key=HTTPLiveStreamURL(Callback(PlayVideo, clip=str(clip)))))

	return [
		MediaObject(
			parts = clips,
			container = 'mpegts',
			video_resolution = '720',
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
def PlayVideo(clip):

	playlist = HTTP.Request(M3U8_LOOKUP % clip).content

	if 'geoblock.flv' in playlist:
		raise Ex.MediaGeoblocked

	playlist_url = playlist.strip()[17:].split("'")[0]

	if playlist_url.startswith('http'):
		playlist_url = playlist_url.replace("master.m3u8","index_7_av.m3u8") # instead of reading the master we want index_7_av (720p)
		return Redirect(playlist_url)

	raise Ex.MediaNotAvailable

####################################################################################################
def TestURLs():

	test_urls = []
	data = XML.ObjectFromURL(FEED_URL)
	shows = data.xpath('//item', namespaces=NAMESPACES)

	for ep in shows:
		try:
			clipId = ep.xpath("./ctv:clipList/item[1]/ctv:id/text()", namespaces=NAMESPACES)[0]
			url = "http://watch.discoverychannel.ca/#clip"+clipId
			test_urls.append(url)
		except:
			continue

		if len(test_urls) >= 3:
			break

	return test_urls
